function getMeta() {
	return {
		PLUGIN_LOCATION: MSPluginManager.mainPluginsFolderURL().path() + '/sketchicon.sketchplugin',
		PREVIEW_APPLICATION: 'Google Chrome'
	}
}

function dumpIcons(context, path) {
	log(path);
	var doc = context.document;
	var artboards = context.document.artboards();

	var iconNames = [];


	// clearDirectory(path);

	// For each icon on the artboard
	for (var i = 0; i < artboards.count(); i++) {
		var icon = artboards[i];

		// Save the icon to the /icons/ folder
		doc.saveArtboardOrSlice_toFile(icon, path + icon.name() + ".svg");

		// Add the icon to the manifest
		// Yep... need to fix the way we force to be a string
		iconNames.push('' + icon.name());
	}

	// Return Icon names in array
	return iconNames;
}

function clearDirectory(path) {
	[[NSFileManager defaultManager] removeItemAtPath:path error:nil];
}

var previewIcons = function (context) {
	var meta = getMeta();
	/**
	 * TODO:
	 * See if there is a way to determine if app.html is already open in the preview application. This way, we could
	 * potentially run many things with less dropdown options for the plugin
	 */

	// Update Icons when opening the previewer
	updateIcons(context);

	var doc = context.document;
	var appHtmlFile = meta.PLUGIN_LOCATION + '/Contents/app/app.html';

	if(![[NSWorkspace sharedWorkspace] openFile:appHtmlFile withApplication:meta.PREVIEW_APPLICATION]]) {
		[doc showMessage:"Failed to open preview file; Make sure '" + meta.PREVIEW_APPLICATION + "' is installed."];
	}
};


var updateIcons = function (context) {
	var meta = getMeta();

	// Store the directories and files we will be working with
	var saveIconDirectory = meta.PLUGIN_LOCATION + '/Contents/app/icons/';
	var saveManifestFile = meta.PLUGIN_LOCATION + '/Contents/app/icon-manifest.js';

	// This is what will be written to the icon-manifest.js
	var iconManifest = {
		icons: dumpIcons(context, saveIconDirectory)
	};

	// Prepare the data write to icon-manifest.js
	// Writes:
	// var iconManifest = {"icons": ["icone-one","icon-two", ... ]};
	iconManifest = NSString.stringWithUTF8String('var iconManifest = ' + JSON.stringify(iconManifest) + ';');
	// Do the actual write
	iconManifest.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(saveManifestFile, true);
};


var exportIcons = function (context) {
	var openPanel = NSOpenPanel.openPanel();
	openPanel.setCanChooseDirectories(true);
	openPanel.setCanCreateDirectories(true);
	openPanel.setCanChooseFiles(false);
	openPanel.setPrompt("Export to Folder");
	openPanel.runModal();

	var path = openPanel.URL().path() + '/';

	log(context);
	log(path);

	dumpIcons(context, path);
};
