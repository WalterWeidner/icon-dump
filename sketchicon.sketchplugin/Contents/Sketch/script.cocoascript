var PLUGIN_LOCATION = MSPluginManager.pluginsURL().path() + '/sketchicon.sketchplugin';
var PREVIEW_APPLICATION = 'Google Chrome';

var previewIcons = function (context) {
	/**
	 * TODO:
	 * See if there is a way to determine if app.html is already open in the preview application. This way, we could
	 * potentially run many things with less dropdown options for the plugin
	 */

	// Update Icons when opening the previewer
	updateIcons(context);

	var doc = context.document;
	var appHtmlFile = PLUGIN_LOCATION + '/Contents/app/app.html';

	if(![[NSWorkspace sharedWorkspace] openFile:appHtmlFile withApplication:PREVIEW_APPLICATION]]) {
		[doc showMessage:"Failed to open preview file; Make sure '" + PREVIEW_APPLICATION + "' is installed."];
	}
};


var updateIcons = function (context) {

	// Store the directories and files we will be working with
	var saveIconDirectory = PLUGIN_LOCATION + '/Contents/app/icons/';
	var saveManifestFile = PLUGIN_LOCATION + '/Contents/app/icon-manifest.js';

	var doc = context.document;
	var artboards = context.document.artboards();

	// This is what will be written to the icon-manifest.js
	var iconManifest = {
		icons: []
	};

	// Remove the icons directory so we have a clean save of all the icons
	[[NSFileManager defaultManager] removeItemAtPath:saveIconDirectory error:nil];

	// For each icon on the artboard
	for (var i = 0; i < artboards.count(); i++) {
		var icon = artboards[i];

		// Save the icon to the /icons/ folder
		doc.saveArtboardOrSlice_toFile(icon, saveIconDirectory + icon.name() + ".svg");

		// Add the icon to the manifest
		// Yep... need to fix the way we force to be a string
		iconManifest.icons.push('' + icon.name());
	}

	// Prepare the data write to icon-manifest.js
	// Writes:
	// var iconManifest = {"icons": ["icone-one","icon-two", ... ]};
	iconManifest = NSString.stringWithUTF8String('var iconManifest = ' + JSON.stringify(iconManifest) + ';');

	// Do the actual write
	iconManifest.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(saveManifestFile, true);
};
